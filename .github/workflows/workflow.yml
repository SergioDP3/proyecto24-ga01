name: Compilación de la rama main

on:
  push:
    branches:
      - "main"
      - "feature/Integracion-Continua"
  workflow_dispatch:

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 12345

    steps:
      # Clona el repositorio
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Para un análisis completo en SonarCloud

      # Configura Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
          cache: maven
      
      # Set up PostgreSQL
      - name: Wait for PostgreSQL to be ready
        run: |
          while ! pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done

      # Ejecutar el script SQL para crear la base de datos y las tablas
      - name: Execute SQL script to set up  User database
        run: |
          # Establecer la contraseña del usuario postgres
          export PGPASSWORD=12345
          # Ejecutar el script SQL para crear las tablas
          psql -h localhost -U postgres -f User.sql
      
      - name: Execute SQL script to set up Content database
        run: |
            # Establecer la contraseña del usuario postgres
            export PGPASSWORD=12345
            # Ejecutar el script SQL para crear las tablas
            psql -h localhost -U postgres -f Content.sql

      - name: Execute SQL script to set up Visualization database
        run: |
            # Establecer la contraseña del usuario postgres
            export PGPASSWORD=12345
            # Ejecutar el script SQL para crear las tablas
            psql -h localhost -U postgres -f Visualization.sql

      # Construye y prueba el primer microservicio
      - name: Build and test microservicio Visualization 
        run: |
          cd Visualization
          mvn clean install
          mvn test

      # Construye y prueba el segundo microservicio
      - name: Build and test microservicio Content
        run: |
          cd Content
          mvn clean install
          mvn test

      # Construye y prueba el tercer microservicio
      - name: Build and test microservicio User
        run: |
          cd User
          mvn clean install
          mvn test
      
      - name: Run Visualization microservice
        run: |
            cd Visualization
            mvn spring-boot:run &

      - name: Run Content microservice
        run: |
            cd Content
            mvn spring-boot:run &
      - name: Run User microservice
        run: |
            cd User
            mvn spring-boot:run &  

    # Análisis de SonarCloud para el microservicio Visualization.
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run SonarCloud analysis for Visualization
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd Visualization
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=SergioDP3_proyecto24-ga01 \
            -Dsonar.organization=sergiodp3 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
                
     # Paso 5: Instalar Node.js (para usar Newman)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Paso 6: Instalar Newman
      - name: Install Newman
        run: npm install -g newman

      # Paso 7: Ejecutar pruebas de Postman
      - name: Run Postman User tests
        run: newman run tests/User.postman_collection.json
      
       # Paso 7: Ejecutar pruebas de Postman
      - name: Run Postman Content tests
        run: newman run tests/Content.postman_collection.json
      
       # Paso 7: Ejecutar pruebas de Postman
      - name: Run Postman Visualization tests
        run: newman run tests/Visualization.postman_collection.json
#================================================================
      - name: Run a one-line script
        run: echo Todos los microservicios \(Visualization, User, Content\) han sido compilados y probados exitosamente
